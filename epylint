#! /usr/bin/env python
import ctypes
import errno
import logging
import hashlib
import os
import socket
import sys
import time


LOG_FILE = os.path.expanduser('~/.emacs.d/epylint.log')
SOCK_DIR = os.path.expanduser('~/.emacs.d/epylintd')
TIMEOUT = 5 * 60 * 1000
SCM_RIGHTS = 0x01

SOCKLEN_T = ctypes.c_uint32

if sys.platform in ['linux', 'linux2']:
    LEN_T = ctypes.c_size_t
    LIBC = 'libc.so.6'
elif sys.platform == "darwin":
    LEN_T = SOCKLEN_T
    LIBC = 'libSystem.dylib'
else:
    raise Exception('Unkown platform')


class iovec(ctypes.Structure):
    _pack_ = 4
    _fields_ = [
        ('base', ctypes.POINTER(ctypes.c_byte)),
        ('len', ctypes.c_size_t),
    ]


class cmsg(ctypes.Structure):
    _pack_ = 4
    _fields_ = [
        ('len', LEN_T),
        ('level', ctypes.c_int),
        ('type', ctypes.c_int),
        ('fd', ctypes.c_int),
    ]

class msghdr(ctypes.Structure):
    _fields_ = [
        ('name', ctypes.c_void_p),
        ('namelen', SOCKLEN_T),
        ('iov', ctypes.POINTER(iovec)),
        ('iovlen', LEN_T),
        ('control', ctypes.POINTER(cmsg)),
        ('controllen', LEN_T),
        ('flags', ctypes.c_int),
    ]


class passfd(object):
    libc = ctypes.CDLL(LIBC, use_errno=True)

    @staticmethod
    def send(sock, fd):
        iov = iovec(base=ctypes.pointer(ctypes.c_byte(0)), len=1)
        payload = cmsg(len=ctypes.sizeof(cmsg),
                       level=socket.SOL_SOCKET,
                       type=SCM_RIGHTS,
                       fd=fd)
        message = msghdr(iov=ctypes.pointer(iov),
                         iovlen=1,
                         control=ctypes.pointer(payload),
                         controllen=ctypes.sizeof(payload))
        res = passfd.libc.sendmsg(sock.fileno(), ctypes.pointer(message), 0)

        if res != 1:
            raise OSError(errno, os.strerror(ctypes.get_errno()))

    @staticmethod
    def recv(sock):
        iov = iovec(base=ctypes.pointer(ctypes.c_byte(0)), len=1)
        payload = cmsg(len=ctypes.sizeof(cmsg))
        message = msghdr(iov=ctypes.pointer(iov),
                         iovlen=1,
                         control=ctypes.pointer(payload),
                         controllen=ctypes.sizeof(payload))
        res = passfd.libc.recvmsg(sock.fileno(), ctypes.pointer(message), 0)

        if res == -1:
            error = ctypes.get_errno()
            raise OSError(errno, os.strerror(error))
        elif res == 0:
            return None

        if (payload.level != socket.SOL_SOCKET or
                payload.type != SCM_RIGHTS):
            raise RuntimeError('Unexpected ancillary messages')

        return payload.fd


def get_sock_path(rc_file):
    python_path = ':'.join(os.path.abspath(path) for path in sys.path)
    key = ':'.join([rc_file or '', python_path])
    return os.path.join(SOCK_DIR, hashlib.sha1(key.encode('utf-8')).hexdigest())


def epylint_daemon(signal_socket, rc_file):
    sock_path = get_sock_path(rc_file)

    import select
    from pylint.lint import Run
    import pylint
    from astroid.builder import MANAGER

    logging.basicConfig(filename=LOG_FILE, level=logging.INFO)
    logger = logging.getLogger('epylint')

    server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM, 0)
    poll = select.poll()

    try:
        os.unlink(sock_path)
    except OSError as e:
        if e.errno != errno.ENOENT:
            raise

    server.bind(sock_path)

    try:
        logger.debug('Started daemon with config file: %s', rc_file)
        server.listen(5)
        signal_socket.send(b'ok')
        signal_socket.close()

        if rc_file:
            pylint.config.PYLINTRC = rc_file

        poll.register(server, select.POLLIN)
        events = poll.poll(60000)

        while events:
            assert len(events) == 1
            assert events[0][0] == server.fileno()

            (client, _) = server.accept()

            start = time.time()
            logger.debug('Client connected')

            fd = passfd.recv(client)
            if fd is None:
                logger.debug('EOF received')
                break

            client_file = client.makefile(mode='rw')
            filename = client_file.readline()[:-1]
            basename, _ = os.path.splitext(filename)
            _, basename = os.path.split(basename)
            dot_basename = '.' + basename

            logger.debug('client send file = %s', filename)
            MANAGER.astroid_cache = {
                key: value
                for key, value in MANAGER.astroid_cache.items()
                if key != basename and not key.endswith(dot_basename)
            }

            sys.stdout = os.fdopen(fd, 'w')
            sys.stderr = sys.stdout

            logger.debug('Running pylint')
            options = {
                '--msg-template': '{abspath}:{line}:{column}:{C}:{symbol} {msg_id}:{msg}',
                '--reports': 'n',
            }
            if rc_file:
                options['--rcfile'] = rc_file
            args_list = ['='.join([k, v]) for k, v in options.items()]
            args_list += [filename]

            run = Run(args_list, exit=False)

            sys.stdout.close()
            client_file.write(str(run.linter.msg_status) + '\n')
            client_file.close()
            client.close()

            end = time.time()
            logger.debug('Pylint done, status = %d, time = %.2f',
                         run.linter.msg_status,
                         end - start)

            events = poll.poll(60000)
    except:
        logger.exception('Unexpected exception')
    finally:
        os.unlink(sock_path)
        server.close()
    logger.debug('daemon exiting')


def spawn_daemon(rc_file):
    parent, child = socket.socketpair()
    pid = os.fork()

    if pid == 0:
        if os.fork() == 0:
            for fd in range(0, 1024):
                try:
                    if fd != child.fileno():
                        os.close(fd)
                except OSError:
                    pass

            os.setsid()
            epylint_daemon(child, rc_file)
            os._exit(0)
        else:
            os._exit(0)
    else:
        child.close()
        msg = parent.recv(1024)
        if msg != b'ok':
            raise RuntimeError('epylint daemon failed to start: ' + repr(msg))


def get_connection(rc_file, force):
    try:
        os.makedirs(SOCK_DIR)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise

    sock_path = get_sock_path(rc_file)
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM, 0)

    try:
        sock.connect(sock_path)
    except socket.error as e:
        if e.errno in [errno.ENOENT, errno.ECONNREFUSED]:
            if force:
                spawn_daemon(rc_file)
                sock.connect(sock_path)
            else:
                return None
        else:
            raise

    return sock


def get_rc_file():
    it = iter(sys.argv[1:])
    param = next((arg for arg in it if arg == '--rcfile'), None)
    if param:
        return next(it)
    return None


def main():
    arg = sys.argv[1]
    rc_file = get_rc_file()

    if arg == '--kill':
        filename = os.path.abspath(sys.argv[2])
        conn = get_connection(rc_file, False)
    else:
        filename = os.path.abspath(sys.argv[-1])
        conn = get_connection(rc_file, True)
        passfd.send(conn, sys.stdout.fileno())
        conn.send(filename.encode('utf-8') + b'\n')
        status = conn.recv(100)
        try:
            sys.exit(0 if int(status) == 0 else 1)
        except ValueError:
            sys.exit(1)


if __name__ == '__main__':
    main()
